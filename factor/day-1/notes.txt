Factor is awesome so far! I remember when I first stumbled across Factor, I found it intriguing, but I never bothered
to learn too much about it because I found it hard to keep the stack in memory (like literal memory, in my brain)
when reading and trying to understand code. The thing that's most striking to me after Day 1 of Factor is that
Factor's Listener (both the GUI and CLI versions) make it easy to keep track of the stack by, well, keeping track of
it for you. I guess this makes it easier to learn Factor, and maybe after you do it for a while, it becomes easier to
read Factor code and do the stack operations in your head? I guess we'll see how well that holds up over the next 2
days.

Today's homework is Listener exercises, not writing any full-fledged programs, so I'll just record my answers here.

* Easy *

3 3 * 4 4 * +
USE: math.functions
3 sq 4 sq + sqrt     or this!: 3 4 [ sq ] bi@ +
1 2 [ dup ] dip
USE: ascii
"Dave" "Hello, " swap append >upper

* Medium *

{ 1 4 17 9 11 } 0 [ + ] reduce
USE: math.ranges
100 [1,b] 0 [ + ] reduce
10 [1,b] [ sq ] map

* Hard *

42 [ 10 /i ] [ 10 mod ] bi
USE: math.parser
12345 number>string [ 1string string>number ] each